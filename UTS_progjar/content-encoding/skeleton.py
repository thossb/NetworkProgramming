import os
import socket
import unittest
import sys
import ssl
import base64
import re
import gzip
from io import StringIO
import hashlib
from unittest.mock import patch, MagicMock

BASE_DIR = os.path.dirname(os.path.realpath(__file__))

class HTMLParser:
    # TODO:
    # 1. Assign semua value yang diperlukan
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.response = None
        self.header = None
        self.content = None
        self.BUFFER_SIZE = 1

    def connect(self):
        # 2. Connect socket
        self.socket.connect((self.host, self.port))

    def SSL(self):
        # 3. Connect SSL
        context = ssl.create_default_context()
        self.socket = self.socket = context.wrap_socket(self.socket, server_hostname=self.host)

    def separate_header(self):
        # 4. Pisahkan header dan content
        self.header = self.response.split(b"\r\n\r\n")[0].decode()
        self.content = self.response.split(b"\r\n\r\n")[1]
        self.content = gzip.decompress(self.content).decode()

    def send_message(self, message):
        # 5. Kirim message dan terima response
        self.response = b''

        self.socket.send(message.encode())
        while True:
            msg = self.socket.recv(self.BUFFER_SIZE)
            self.response += msg
            #if msg is None:
            if len(self.response) == 11892:
                break

        # self.response = self.response.decode()
        self.separate_header()
        
    def get_content_encoding(self):
        # 7. Ambil content encoding
        content_encoding = self.response.split(b"Content-Encoding: ")[1].split(b"\r\n")[0].decode()
        return content_encoding

    def disconnect(self):
        self.socket.close()

# A 'null' stream that discards anything written to it
class NullWriter(StringIO):
    def write(self, txt):
        pass

# Unit Test [JANGAN DIEDIT]
cr_response = ""
cr_response = base64.b64decode(cr_response)

server_hostname = "classroom.its.ac.id"
server_port = 443
msg_request = "GET / HTTP/1.1\r\nHost: classroom.its.ac.id\r\nSec-Ch-Ua: \"Not(A:Brand\";v=\"24\", \"Chromium\";v=\"122\"\r\nSec-Ch-Ua-Mobile: ?0\r\nSec-Ch-Ua-Platform: \"macOS\"\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\r\nSec-Fetch-Site: none\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-User: ?1\r\nSec-Fetch-Dest: document\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9\r\nPriority: u=0, i\r\n\r\n"

class TestHTMLParser(unittest.TestCase):

    def setUp(self):
        self.parser = HTMLParser(server_hostname, server_port)
        # modify socket output to be a mock object
        self.parser.socket = MagicMock()
        # set output to cr_response byte by byte type byte
        byte_of_cr_response = [bytes([byte]) for byte in cr_response]
        self.parser.socket.recv.side_effect = byte_of_cr_response

        cr_request_checksum = hashlib.md5(msg_request.encode()).hexdigest()
        print("Request checksum:", cr_request_checksum)

        cr_response_checksum = hashlib.md5(cr_response).hexdigest()
        print("Response checksum:", cr_response_checksum)

    def tearDown(self):
        self.parser.disconnect()

    def test_get_content_encoding(self):
        self.parser.send_message(msg_request)

        # print header checksum
        header_checksum = hashlib.md5(self.parser.header.encode()).hexdigest()
        print("Header checksum:", header_checksum)

        # print content checksum
        content_checksum = hashlib.md5(self.parser.content.encode()).hexdigest()
        print("Content checksum:", content_checksum)

        content_encoding = self.parser.get_content_encoding()
        print("Content encoding:", content_encoding)

if __name__ == "__main__":
    ENV = 'domjudge' # Change this to 'domjudge' when submitting to DOMJudge
    # Ong
    if ENV != 'domjudge':
        client = HTMLParser("classroom.its.ac.id", 443)
        client.connect()
        client.SSL()
        client.send_message(msg_request)
        print(client.get_status_code())
        print(client.get_content_encoding())
        print(client.get_http_version())
        print(client.get_charset())
        print(client.get_menu())
    else:
        # Redirect stdout to a null stream to suppress output
        runner = unittest.TextTestRunner(stream=NullWriter())
        unittest.main(testRunner=runner, exit=False)
